# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-tutorial
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs12.x
  profile: serverless-johanMac
  region: ca-central-1
  httpApi:
    cors: true
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
        - ses:*
      Resource: "*"
  # apiKeys:
  #   - free:
  #       - myFreeApiKey
  #   - paid:
  #       - myPaidApiKey
  # usagePlan:
  #   - free:
  #     quota:
  #       limit: 1000
  #       period: MONTH
  #     throttle:
  #       rateLimit: 5
  #       burstLimit: 20
  #   - paid:
  #     quota:
  #       limit: 10000
  #       period: MONTH
  #     throttle:
  #       rateLimit: 50
  #       burstLimit: 200

# you can overwrite defaults here
#  stage: dev

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

# Removing external bucket
plugins:
  - serverless-webpack
#     - serverless-s3-sync
custom:
  tableName: player-points
  bucketName: serverlesstest1-bucket
#     s3Sync:
#         - bucketName: serverlesstest1-bucket
#           localDir: uploadData

package:
  individually: true

functions:
  getUser:
    handler: lambdas/endpoints/getUser.handler
    events:
      - httpApi:
          path: /get-user/{ID}
          method: GET
          # private: true

  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events:
      - httpApi:
          path: /get-player-score/{ID}
          method: GET
  createPlayerScore:
    handler: lambdas/endpoints/createPlayerScore.handler
    events:
      - httpApi:
          path: /create-player-score/{ID}
          method: POST

  createFile:
    handler: lambdas/endpoints/createFile.handler
    events:
      - httpApi:
          path: /create-file/{fileName}
          method: POST

  getFile:
    handler: lambdas/endpoints/getFile.handler
    events:
      - httpApi:
          path: /get-file/{fileName}
          method: POST

  sendEmail:
    handler: lambdas/endpoints/sendEmail.handler
    events:
      - httpApi:
          path: /sendEmail
          method: POST
  # proxy:
  #   handler: lambdas/endpoints/proxy.handler
  #   events:
  #     - httpApi:
  #         path: /chuck-norris/{proxy+}
  #         method: ANY
  #         integration: http-proxy
  #         request:
  #           uri: http://api.icndb.com/{proxy}
  #           parameters:
  #             paths:
  #               proxy: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    #     DemoBucketUpload:
    #       Type: AWS::S3::Bucket
    #       Properties:
    #         BucketName: ${self:custom.bucketName}
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    myAssumeRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: myAssumeRoleTutorial
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - apigateway.amazonaws.com
              Action:
                - sts:AssumeRole
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
